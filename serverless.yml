service: vt-sls-api

custom:
  settings:
    ORGS_TABLE: orgs-table

provider:
  name: aws
  runtime: nodejs12.x
  environment: ${self:custom.settings} #self refers to the file itself (so we're saying get the settings for the environment from this file itself)
  region: eu-west-1 #ireland
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:DescribeTable #to know metadata about the table
        - dynamodb:Scan #gets multiple items (like a get req)
        - dynamodb:GetItem #gets one item
        - dynamodb:PutItem #adds one item
        - dynamodb:UpdateItem #like a patch req
        - dynamodb:DeleteItem #deletes
      Resource:
        'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.settings.ORGS_TABLE}'
        #arn = amazon resource name, then specify dynamodb, then use self to point to region in file, then use self again to point to the table declared earlier in this file

functions:
  createOrg: #post request
    handler: handler.createOrg
    events:
      - http:
          path: /orgs
          method: post
          cors: true
  getAllOrgs: #get request that gets all orgs
    handler: handler.getAllOrgs
    events:
      - http:
          path: /orgs
          method: get
          cors: true
  getOrg: #gets org by id
    handler: handler.getOrg
    events:
      - http:
          path: /orgs/{id}
          method: get
          cors: true
  updateOrg: #updates org by id (put req)
    handler: handler.updateOrg
    events:
      - http:
          path: /orgs/{id}
          method: put
          cors: true
  deleteOrg: #delete org by id
    handler: handler.deleteOrg
    events:
      - http:
          path: /orgs/{id}
          method: get
          cors: true

resources:
  Resources:
    OrgTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: 'id'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'id'
            KeyType: 'HASH'
        ProvisionedThroughput: #gives it units to read/write (how AWS tracks and charges)
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.settings.ORGS_TABLE}
# ---------------------------------------------------------------------------------------------
# ------------------ EXAMPLES GIVEN BY SERVERLESS: --------------------------------------------
# ---------------------------------------------------------------------------------------------

# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

# service: vt-sls-api
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

# provider:
#   name: aws
#   runtime: nodejs12.x

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

# functions:
#   hello:
#     handler: handler.hello
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
